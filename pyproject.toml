[project]
name = "orgpedia"
version = "0.1.0"
description = "Orgpedia: Information extraction & presentation for public good."
authors = [{ name = "Orgpedia Foundation", email = "orgpedia.foundation@gmail.com" }]
requires-python = ">3.8.1"
readme = "README.md"
license = "MIT"
keywords = [
    "information extraction",
    "government data",
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
    "docint",
    "lunr>=0.6.2,<0.7",
    "babel>=2.11.0,<3",
    "jinja2>=3.1.3,<4",
    "typer>=0.7.0,<0.8",
]

[project.urls]
Homepage = "https://github.com/orgpedia/orgpedia"
homepage = "https://www.orgpedia.in/"
repository = "https://github.com/orgpedia/orgpedia"

[project.scripts]
op = "orgpedia.tools.cli:main"

[dependency-groups]
test = [
    "pytest>=7.1.3,<8",
    "pytest-cov>=4.0.0,<5",
]
dev = [
    "black>=22.10.0,<23",
    "ruff>=0.0.243,<0.0.244",
]
docs = []

[tool.uv]
default-groups = [
    "test",
    "dev",
    "docs",
]

[tool.uv.sources]
docint = { git = "https://github.com/mukundesh/docInt.git" }

[tool.hatch.build.targets.sdist]
include = ["orgpedia"]

[tool.hatch.build.targets.wheel]
include = ["orgpedia"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.coverage.run]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "def main"
    ]

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = py38, py39, py310, format, lint, build

[gh-actions]
python =
    3.11: py311
    3.10: py310
    3.9: py39
    3.8: py38, format, lint, build


[testenv]
allowlist_externals = pytest
extras =
    test
passenv = *
setenv =
    PYTHONPATH = {toxinidir}
    PYTHONWARNINGS = ignore
commands =
    pytest --cov=orgpedia --cov-branch --cov-report=xml --cov-report=term-missing tests

[testenv:format]
allowlist_externals =
    isort
    black
extras =
    test
commands =
    isort orgpedia tests
    black orgpedia tests

[testenv:lint]
allowlist_externals =
    flake8
extras =
    test
commands =
    flake8 orgpedia tests


[testenv:build]
allowlist_externals =
    poetry
    mkdocs
    twine
extras =
    doc
    dev
commands =
    poetry build
    mkdocs build
    twine check dist/*
"""

[tool.ruff]
# Enable Pyflakes `E` and `F` codes by default.
select = ["E", "F", "W", "I001"]
ignore = [ "E501", "F401", "E741" ]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["I001"] # fix only isort issues
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    ".mypy_cache",
    ".nox",
    ".ruff_cache",
    ".tox",
    "__pypackages__",
    "dist",
    "node_modules",
    "venv",
    ".bak",
]
per-file-ignores = {}

# Same as Black.
line-length = 100

# Allow unused variables when underscore-prefixed.
#dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.7
target-version = "py38"
